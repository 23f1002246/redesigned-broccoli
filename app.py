"""
app.py

A single-file Flask app for the LLM Code Deployment project.

Features:
- Accepts POST JSON tasks (round 1 and round 2)
- Verifies secret from secrets.py
- Decodes data: URI attachments
- Generates minimal static site (index.html, README.md, LICENSE)
- Uses git + gh CLI to create public repo and push
- Enables GitHub Pages via gh CLI
- Polls pages_url until HTTP 200
- Posts back to evaluation_url with repo metadata
"""

import re
import io
import json
import time
import hashlib
import base64
import logging
import shutil
import subprocess
from pathlib import Path
from threading import Thread

import requests
from flask import Flask, request, jsonify

# --- Import configuration/secrets ---
from secrets import (
    PROJECT_SECRET,
    GITHUB_USER,
    GIT_AUTHOR_NAME,
    GIT_AUTHOR_EMAIL,
    PAGES_POLL_TIMEOUT,
    PAGES_POLL_INTERVAL,
    WORK_DIR,
)

WORK_DIR = Path(WORK_DIR)
WORK_DIR.mkdir(parents=True, exist_ok=True)

# Logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
logger = logging.getLogger("deployer")

app = Flask(__name__)

# --- Helpers ---
DATA_URI_RE = re.compile(
    r"data:([\w/+-\.]+)?(?:;charset=[^;]+)?(?:;base64)?,(.*)", re.S
)


def short_hash(s: str, length: int = 6) -> str:
    return hashlib.sha1(s.encode("utf-8")).hexdigest()[:length]


def decode_data_uri(data_uri: str) -> bytes:
    m = DATA_URI_RE.match(data_uri)
    if not m:
        raise ValueError("invalid data URI")
    data = m.group(2)
    try:
        return base64.b64decode(data)
    except Exception:
        return data.encode("utf-8")


def run_checked(cmd, cwd=None, capture_output=False):
    logger.info("RUN: %s", " ".join(cmd))
    res = subprocess.run(cmd, cwd=cwd, text=True, capture_output=capture_output)
    if res.returncode != 0:
        logger.error(
            "Command failed: %s\nSTDOUT:\n%s\nSTDERR:\n%s", cmd, res.stdout, res.stderr
        )
        raise RuntimeError(f"Command failed: {cmd}")
    return res.stdout if capture_output else None


def write_license(path: Path):
    mit = (
        "MIT License\n\nCopyright (c) {year} {owner}\n\nPermission is hereby granted, free of charge, to any person obtaining a copy"
        ' of this software and associated documentation files (the "Software"), to deal in the Software without restriction,'
        " including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies"
        " of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n"
        "The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n"
        'THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES'
        " OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS"
        " BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN"
        " CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
    )
    year = time.gmtime().tm_year
    owner = GIT_AUTHOR_NAME or GITHUB_USER or ""
    path.write_text(mit.format(year=year, owner=owner))


def generate_index_html(task: str, brief: str, attachments: list) -> str:
    return f"""<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Task: {task}</title>
</head>
<body>
  <h1 id="task-title">{task}</h1>
  <div id="brief">{brief}</div>
  <div id="source">Source URL: <span id="source-url">(none)</span></div>
  <div id="result">(no result yet)</div>

  <script>
    function q(n) {{return new URLSearchParams(location.search).get(n);}}
    const url = q('url') || '';
    document.getElementById('source-url').textContent = url || 'attachment fallback';
    setTimeout(()=>{{ document.getElementById('result').textContent = 'SAMPLE-SOLUTION'; }}, 800);
  </script>
</body>
</html>
"""


def generate_readme(task: str, brief: str) -> str:
    return f"""# {task}

## Summary
{brief}

## How to run
Open `index.html` in a browser or serve with `python -m http.server`.

## How this meets the checks
- MIT license at repo root.
- Page displays URL passed via `?url=` into `#source-url`.
- Displays solved text inside `#result` within 15s (simulated by default).

## Notes
This repo was generated by an automated pipeline in response to a task request.

## License
MIT
"""


def create_repo_worktree(task: str, brief: str, attachments: list) -> tuple:
    seed = brief + "".join(a.get("url", "") for a in (attachments or []))
    name_safe = re.sub(r"[^a-zA-Z0-9_-]+", "-", task)[:40]
    repo_name = f"task-{name_safe}-{short_hash(seed)}"
    repo_path = WORK_DIR / repo_name
    if repo_path.exists():
        logger.info("Cleaning existing path %s", repo_path)
        shutil.rmtree(repo_path)
    repo_path.mkdir(parents=True)

    # Write files
    (repo_path / "index.html").write_text(
        generate_index_html(task, brief, attachments or [])
    )
    (repo_path / "README.md").write_text(generate_readme(task, brief))
    write_license(repo_path / "LICENSE")

    # Decode attachments
    for att in attachments or []:
        try:
            data = decode_data_uri(att["url"])
            fname = att.get("name") or f"attachment-{short_hash(att.get('url',''))}"
            (repo_path / fname).write_bytes(data)
        except Exception as e:
            logger.warning("Failed to decode attachment %s: %s", att.get("name"), e)

    return repo_path, repo_name


def git_init_commit_push(repo_path: Path, repo_name: str):
    env = None
    if GIT_AUTHOR_NAME or GIT_AUTHOR_EMAIL:
        env = os.environ.copy()
        if GIT_AUTHOR_NAME:
            env["GIT_AUTHOR_NAME"] = GIT_AUTHOR_NAME
        if GIT_AUTHOR_EMAIL:
            env["GIT_AUTHOR_EMAIL"] = GIT_AUTHOR_EMAIL

    run_checked(["git", "init"], cwd=str(repo_path))
    run_checked(["git", "add", "."], cwd=str(repo_path))
    run_checked(["git", "commit", "-m", "Initial commit"], cwd=str(repo_path))
    run_checked(["git", "branch", "-M", "main"], cwd=str(repo_path))

    run_checked(
        [
            "gh",
            "repo",
            "create",
            repo_name,
            "--public",
            "--source=.",
            "--remote=origin",
            "--push",
        ],
        cwd=str(repo_path),
    )

    sha = (
        subprocess.check_output(["git", "rev-parse", "HEAD"], cwd=str(repo_path))
        .decode()
        .strip()
    )
    return sha


def enable_pages(repo_name: str):
    run_checked(["gh", "repo", "edit", repo_name, "--enable-pages"])


def poll_pages_url(
    pages_url: str,
    timeout: int = PAGES_POLL_TIMEOUT,
    interval: int = PAGES_POLL_INTERVAL,
) -> bool:
    logger.info("Polling pages url %s", pages_url)
    deadline = time.time() + timeout
    while time.time() < deadline:
        try:
            r = requests.get(pages_url, timeout=5)
            if r.status_code == 200:
                return True
        except Exception:
            pass
        time.sleep(interval)
    return False


def notify_evaluation(evaluation_url: str, payload: dict, max_attempts: int = 6):
    headers = {"Content-Type": "application/json"}
    attempt = 0
    while attempt < max_attempts:
        try:
            resp = requests.post(
                evaluation_url, json=payload, headers=headers, timeout=10
            )
            if resp.status_code == 200:
                return True
        except Exception:
            pass
        time.sleep(2**attempt)
        attempt += 1
    return False


# --- Flask endpoints ---
@app.route("/api", methods=["POST"])
def api_handler():
    data = request.get_json(silent=True)
    if not data:
        return jsonify({"error": "invalid json"}), 400

    required = ["email", "secret", "task", "round", "nonce", "brief", "evaluation_url"]
    for k in required:
        if k not in data:
            return jsonify({"error": f"missing {k}"}), 400

    if PROJECT_SECRET is None:
        logger.error("PROJECT_SECRET not set")
        return jsonify({"error": "server misconfigured"}), 500

    if data.get("secret") != PROJECT_SECRET:
        return jsonify({"error": "invalid secret"}), 400

    ack = {"status": "ok", "task": data.get("task"), "round": data.get("round")}
    Thread(target=_do_pipeline, args=(data,), daemon=True).start()
    return jsonify(ack), 200


def _do_pipeline(data: dict):
    email = data["email"]
    task = data["task"]
    brief = data["brief"]
    round_idx = int(data["round"])
    nonce = data["nonce"]
    evaluation_url = data["evaluation_url"]
    attachments = data.get("attachments", [])

    repo_path, repo_name = create_repo_worktree(task, brief, attachments)
    sha = git_init_commit_push(repo_path, repo_name)
    enable_pages(repo_name)
    pages_url = f"https://{GITHUB_USER}.github.io/{repo_name}/"

    if not poll_pages_url(pages_url):
        logger.warning("Pages did not become live within timeout for %s", repo_name)

    payload = {
        "email": email,
        "task": task,
        "round": round_idx,
        "nonce": nonce,
        "repo_url": f"https://github.com/{GITHUB_USER}/{repo_name}",
        "commit_sha": sha,
        "pages_url": pages_url,
    }

    if not notify_evaluation(evaluation_url, payload):
        logger.error("Failed to notify evaluation for %s", repo_name)


@app.route("/health", methods=["GET"])
def health():
    return jsonify({"status": "ok"}), 200


if __name__ == "__main__":
    if PROJECT_SECRET is None or GITHUB_USER is None:
        logger.error("Missing PROJECT_SECRET or GITHUB_USER in secrets.py")
        raise SystemExit(1)
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", "8000")))
